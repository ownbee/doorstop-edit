name: Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '**'

jobs:
  tests:
    name: ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.image }}
    timeout-minutes: 10
    strategy:
      matrix:
        os: [Ubuntu, macOS, Windows]
        python-version: ["3.9", "3.10", "3.11"]
        include:
          - os: Ubuntu
            image: ubuntu-22.04
          - os: Windows
            image: windows-2022
          - os: macOS
            image: macos-12
      fail-fast: false
    env:
      DISPLAY: :99.0
      QT_DEBUG_PLUGINS: "1"
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Ubuntu Qt dependencies
        if: ${{ matrix.os == 'Ubuntu' }}
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libglib2.0-0 libgles2-mesa-dev libdbus-1-3 libxkbcommon-x11-0 libxkbfile1 libnss3 libxcomposite1 libxdamage1 libxrender1 libxrandr2 libxtst6 libxi6 libasound2
          version: 1.0

      - name: Install Ubuntu xvfb dependencies
        if: ${{ matrix.os == 'Ubuntu' }}
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0 x11-utils libxcb-cursor0
          version: 1.0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT

      - uses: Gr1N/setup-poetry@v8

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Check lock file
        run: poetry lock --check

      - name: Install dependencies
        run: poetry install --no-root

      - name: Build resources
        run: poetry run python build.py

      - name: Code check
        run: poetry run python tools/check_code.py

      - name: Run tests (Ubuntu)
        if: ${{ matrix.os == 'Ubuntu' }}
        run: xvfb-run poetry run pytest -- -ra --color=yes --cov=doorstop_edit --cov-report=xml

      - name: Run tests (other)
        if: ${{ matrix.os != 'Ubuntu' }}
        run: poetry run pytest -- -ra -s --color=yes --cov=doorstop_edit --cov-report=xml

      - uses: codecov/codecov-action@v3
        if: ${{ matrix.os == 'Ubuntu' && matrix.python-version == '3.10' && github.repository == 'ownbee/doorstop-edit' }}
        with:
          files: ./coverage.xml
          fail_ci_if_error: true